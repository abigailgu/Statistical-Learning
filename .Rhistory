flights_delayed2 <- filter(flights, arr_delay >0, dep_delay >0 )
flights_delayed2
View(flights_delayed2)
View(flights_delayed)
View(flights_delayed)
flights_delayed2 <- filter(flights, arr_delay >0 & dep_delay >0 )
flights_delayed2 <- filter(flights, arr_delay >15 & dep_delay >15 )
flights_delayed2
flights_delayed2
merges_planes <- merge(flights_delayed, planes, by = "tailnum")
xx <- merges_planes %>% group_by(type) %>% summarise(s_dep_delay = sum(dep_delay), s_arr_delay = sum(arr_delay))
xx
xx <- merges_planes %>% group_by(type) %>% summarise(s_dep_delay = sum(dep_delay), s_arr_delay = sum(arr_delay, na.rm = T))
xx
xx <- merges_planes %>% group_by(type) %>% summarise(s_dep_delay = sum(dep_delay,na.rm = T), s_arr_delay = sum(arr_delay, na.rm = T))
xx
xx <- merges_planes %>% group_by(hour) %>% summarise(s_dep_delay = sum(dep_delay,na.rm = T), s_arr_delay = sum(arr_delay, na.rm = T))
xx
xx <- merges_planes %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay,na.rm = T), s_arr_delay = mean(arr_delay, na.rm = T))
xx
ggplot(data = xx, mapping = aes(x = hour, y = c(s_dep_delay,s_arr_delay))) + geom_point() + geom_smooth()
ggplot(data = xx, mapping = aes(x = hour, y = s_dep_delay)) + geom_point() + geom_smooth()
View(flights)
View(flights_delayed)
xx
xx <- merges_planes %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay))
xx
xx <- flights_delayed %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay))
xx
ggplot(data = xx, mapping = aes(x = hour, y = s_dep_delay)) + geom_point() + geom_smooth()
arr_delay_data <- flights %>%  select(arr_delay, dep_delay, hour)
arr_delay_data
arr_delay_data$hour <- ifelse(arr_delay_data$hour == 2400, 0,
arr_delay_data$hour)
arr_delay_data$hour <- ifelse(arr_delay_data$hour == 2400, 0,
arr_delay_data$hour)
arr_delay_data
arr_delay <- arr_delay_data %>%
select(hour, arr_delay, dep_delay) %>%
group_by(hour) %>%
summarise(avg_delay = mean(arr_delay, na.rm = TRUE) +
mean(dep_delay, na.rm = TRUE)) %>%
na.omit()
arr_delay
ggplot(arr_delay, aes(x = as.numeric(hour), y = avg_delay,
title = "Delay - hourly"))
ggplot(arr_delay, aes(x = as.numeric(hour), y = avg_delay,
title = "Delay - hourly"))
xx <- flights_delayed %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay))
xx
ggplot(data = xx, mapping = aes(x = hour, y = s_dep_delay)) + geom_point() + geom_smooth()
xx <- flights_delayed %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay))
xx
ggplot(data = xx, mapping = aes(x = hour, y = s_dep_delay)) + geom_point() + geom_smooth()
xx <- flights_delayed %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay), n = n_distinct(tailnum))
xx
options(scipen = 999)
flights <- as.data.frame(nycflights13::flights)
wheather <- nycflights13::weather
airports <- nycflights13::airports
planes <- nycflights13::planes
flights_delayed <- filter(flights, dep_delay >15 ) #We want to see only the delayed flights
xx <- flights_delayed %>% group_by(hour) %>% summarise(s_dep_delay = mean(dep_delay), n = n_distinct(tailnum))
xx
ggplot(data = xx, mapping = aes(x = hour, y = s_dep_delay)) + geom_point() + geom_smooth()
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth()
xx <- flights_delayed %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay), n = n_distinct(tailnum))
xx
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth()
xx <- flights_delayed %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth()
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(dep_delay))
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:12)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
sampled_df
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(dep_delay))
by_month
flights_delayed
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(dep_delay, na.rm = T))
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
by_month
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(dep_delay, na.rm = T))
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(tailnum, na.rm = T))
by_month
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(tailnum, na.rm = T))
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:12)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(tailnum, na.rm = T))
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:12)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(tailnum, na.rm = T))
by_month
sum(by_month$val)
flights_delayed
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n_distinct(year, na.rm = T))
sum(by_month$val)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n(year, na.rm = T))
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n(year, na.rm = T))
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = count(year, na.rm = T))
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = n(by_month$val))
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n(year))
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
sum(by_month$val)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:12)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:12)){
x <- data.frame(month = c(1:7), semp = c(rep(i,7)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:7)){
x <- data.frame(month = c(1:7), semp = c(rep(i,7)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:8)){
x <- data.frame(month = c(1:7), semp = c(rep(i,7)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,7))) #named the real data as sample 1.
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:7)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:7)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:8)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:8)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:9)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:9)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:9)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 6)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:9)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 8)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
xx
xx <- flights %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay)) +
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth()
xx <- flights %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay))
xx
flights
xx <- flights %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay, na.rm = T))
xx
flights2 <- filter(flights, dep_delay > 0)
xx <- flights2 %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay, na.rm = T))
xx
xx <- flights_delayed  %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay, na.rm = T))
xx
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth()
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth() + ylim(c(0,100))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth() + ylim(c(20,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth() + ylim(c(40,80))
ggplot(data = flights_delayed, mapping = aes(x = hour, y = dep_delay)) + geom_boxplot()
ggplot(data = flights_delayed, mapping = aes(x = as.numeric(hour), y = dep_delay)) + geom_boxplot()
ggplot(data = flights_delayed, mapping = aes(x = factor(hour), y = dep_delay)) + geom_boxplot()
ggplot(data = flights_delayed, mapping = aes(x = factor(hour), y = dep_delay)) + geom_boxplot()+ ylim(c(0,500))
ggplot(data = flights_delayed, mapping = aes(x = factor(hour), y = dep_delay)) + geom_boxplot()+ ylim(c(0,300))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth() + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth(method = "lm", fill = "violet", color = "violetred4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
xx <- flights_delayed  %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay, na.rm = T))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth(method = "lm", fill = "darkblue", color = "cyan") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth(method = "lm", fill = "darkblue", color = "blue") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth(method = "lm", fill = "darkblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point() + geom_smooth(method = "lm", fill = "deepskyblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point(color = dodgerblue4) + geom_smooth(method = "lm", fill = "deepskyblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point(color = "dodgerblue4") + geom_smooth(method = "lm", fill = "deepskyblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(40,80))
xx
ggplot(data = xx, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point(color = "dodgerblue4") + geom_smooth(method = "lm", fill = "deepskyblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(45,75))
# tools and data upload
library(ggplot2)
library(dplyr)
library(scales) # needed for formatting y-axis labels to non-scientific type
library(tidyr)
library(tidyverse)
library(ggthemes)
library(datasets)
library(nycflights13)
library(kableExtra) #table styling
library(e1071) # kurtosis and skeeness
library(MASS) # reg modeling
library(corrplot)
library(caTools)
library(plotly)
library(lubridate)
library(hexbin)
library(usmap)
library(rgdal)
library(ggiraph)
library(wesanderson)
library(viridis)
options(scipen = 999)
flights <- as.data.frame(nycflights13::flights)
wheather <- nycflights13::weather
airports <- nycflights13::airports
planes <- nycflights13::planes
#EWR/ LGA/ JFK to choose
week_cycles <- as.data.frame(flights) %>% filter(origin == 'EWR') %>% dplyr::select(time_hour ,dep_delay ,sched_dep_time)
week_cycles$time_hour <- as.Date(week_cycles$time_hour)
week_cycles<- week_cycles %>% mutate(delay = if_else(dep_delay <= 15 ,0,1,0))
week_cycles_freq <- week_cycles %>% group_by(time_hour) %>% summarise(frequency = n())
week_cycles_delay <- week_cycles %>% group_by(time_hour) %>% summarise(sum(delay))
l <- length(week_cycles_freq$frequency)
week_cycles_min <- week_cycles_freq[c(2:(l-1)),]
week_cycles_min <- week_cycles_min %>% mutate(local_min = (week_cycles_min$frequency == runmin(week_cycles_min$frequency,length(week_cycles_min$frequency)/2)))
week_cycles_min <- week_cycles_min %>% filter(local_min == T) %>% filter(frequency < 250)
ggplot(data = week_cycles_freq,aes(x = time_hour,
y= week_cycles_freq$frequency,colour = "blue")) +
geom_point() + geom_line(aes(color = "blue")) +
geom_point(data = week_cycles_delay,aes(x=time_hour,y= `sum(delay)`), color ='red') +
geom_linerange(data = week_cycles_delay,aes(x= time_hour, ymax =`sum(delay)` ,ymin=0,color = 'red')) +
geom_point(data = week_cycles_min,aes(x=time_hour,y=week_cycles_min$frequency,
color = "lightblue"),size = 7)+
scale_color_identity(name ="" ,breaks = c("blue","red", "lightblue"),
labels = c("All Flights (scheculed for departure)",
"Late Flights (departure delayed >15)", "Fewer Flights"),
guide =  guide_legend(override.aes = list(linetype = c(1, 1, 0), shape =                                                        c(16,16,16),size = c(1,1,7)))) +
theme_light()  +
xlab("Date")+ ylab("Flights per day") +
theme(legend.position="top",legend.direction = "vertical") +
ggtitle(label = "Weekly Cycles", subtitle = "the airport, we need to choose, Year = 2013") +
theme(plot.title = element_text(hjust = 0.5,size = 20),plot.subtitle = element_text(hjust = 0.5,size = 15))
dep_delay <- as.data.frame(flights) %>% filter(origin == 'EWR') %>%
mutate(delay = if_else(dep_delay <= 15 ,0,1,0)) %>% group_by(faa = dest) %>% summarise(amount = (frequency = n()), dep = sum(delay)) %>% mutate(per = dep/amount)
dep_delay_loc <- dep_delay %>% left_join(airports, by = "faa") %>% drop_na()
# removed : STT,SJU, BQN need to be explain why they can be found.
dep_delay_loc <- dep_delay_loc %>% mutate(per_ch = NA)
dep_delay_loc$per_ch[dep_delay_loc$per <= 0.10 ] <- "<= 10%"
dep_delay_loc$per_ch[dep_delay_loc$per <= 0.15 & dep_delay_loc$per > 0.10 ] <- "10% - 15%"
dep_delay_loc$per_ch[dep_delay_loc$per <= 0.20 & dep_delay_loc$per > 0.15 ] <- "15% - 20%"
dep_delay_loc$per_ch[dep_delay_loc$per <= 0.25 & dep_delay_loc$per > 0.20 ] <- "20% - 25%"
dep_delay_loc$per_ch[dep_delay_loc$per >= 0.25] <- "25% <="
dep_delay_loc$per_ch <- factor(dep_delay_loc$per_ch, levels = c("<= 10%","10% - 15%",
"15% - 20%","20% - 25%","25% <="))
dep_delay_loc <- dep_delay_loc %>% mutate(nyc_EWR_lon = -74.16867) %>% mutate(nyc_EWR_lat = 40.6925 )
dep_delay_trans <- dep_delay_loc %>% select(lon,lat) %>% usmap_transform()
dep_delay_loc$lon <- dep_delay_trans$lon.1
dep_delay_loc$lat <- dep_delay_trans$lat.1
dep_delay_trans <- dep_delay_loc %>% select(nyc_EWR_lon,nyc_EWR_lat) %>% usmap_transform()
dep_delay_loc$lnyc_EWR_lon <- dep_delay_trans$nyc_EWR_lon.1
dep_delay_loc$lnyc_EWR_lat <- dep_delay_trans$nyc_EWR_lat.1
row.names(dep_delay_loc) <- dep_delay_loc$name
plot_del <- plot_usmap(regions = "states",labels = TRUE,exclude =  c("AK","HI"), size = 0.5,
label_color = "grey",
color = "grey") +
theme(panel.background=element_blank()) +
geom_segment(data = dep_delay_loc, aes(xend = lon,yend = lat, x = lnyc_EWR_lon,
y = lnyc_EWR_lat ,colour = per_ch),size = 0.5) +
geom_point(data = dep_delay_loc, aes(x = lon , y = lat, colour =  per_ch, text = row.names(dep_delay_loc)),
size = 0.5, show.legend = F) +
scale_color_manual(name = "",values = c("green","purple","blue","orange","red"),
guide =  guide_legend(override.aes = list(linetype = c(1, 1, 1,1,1),
size = c(1.5,1.5,1.5,1.5,1.5))))+
labs(title = '<b>% of Flight Departures Delayed > 15 Min</b><br> Airport = EWR Year = 2013', caption = "Click line endpoint to see that airport departures") +
theme(plot.title = element_text(hjust = 0.5,size = 13),
plot.subtitle = element_text(hjust = 0.5,size = 10))
ggplotly(plot_del, tooltip = "text") %>% layout(legend = list(x = 0, y = 0))
flights_delayed <- filter(flights, dep_delay >15 ) #We want to see only the delayed flights
flights_delayed1 <- flights_delayed %>%  group_by(time_hour) %>% summarise(Avg_dep_delay = mean(dep_delay))
Wheather_cond <- left_join(flights_delayed1, wheather) #combine the two relevant data frames
visib_df <- Wheather_cond %>% group_by(visib) %>% summarise(Avg_dep_delay = mean(Avg_dep_delay))
ggplot(data = visib_df, mapping = aes(x = visib, y = Avg_dep_delay)) + geom_point(color = "violetred4") +
geom_smooth(method = "lm", fill = "violet", color = "violetred4") +
labs(x = "visibility", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Quality of visibility")
by_hour <- flights_delayed  %>% group_by(hour) %>% summarise(Avg_dep_delay = mean(dep_delay, na.rm = T))
ggplot(data = by_hour, mapping = aes(x = hour, y = Avg_dep_delay)) + geom_point(color = "dodgerblue4") + geom_smooth(method = "lm", fill = "deepskyblue", color = "dodgerblue4") +
labs(x = "Hour", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Hour") + ylim(c(45,75))
#Creat a plot that shows the distribution of the delayed flights in each day of every month
ggplot(data = flights_delayed, aes(x = day)) +
geom_bar(aes(fill = month))+ facet_wrap(~month) +
labs(title  = "Distribution of delayed flight in each month",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Day") + scale_fill_viridis_c(guide = F)
#First' we created a df that containes only the data that we need
by_month <- flights_delayed %>% group_by(month) %>% summarise(val = n())
by_month <- data.frame(by_month, semp = c(rep(1,12))) #named the real data as sample 1.
sampled_df <- by_month
row.names(sampled_df) <- by_month$month
#loop that sample new vecrots and tag the sample with number
#also each sample will merged to the data that containes the real values.
for (i in (2:9)){
x <- data.frame(month = c(1:12), semp = c(rep(i,12)),val = sample(by_month$val))
sampled_df <- full_join(sampled_df, x)
}
#plot all of the samples in the Line-up method
# we added colors that will help us identify the pattern of the values.
ggplot(data = sampled_df, mapping = aes(x  = month, y = val, fill = val)) + facet_wrap(~semp) +
scale_x_continuous(breaks = c(1:12)) +
geom_bar(stat="identity") +
labs(title  = "Simulated data-sets of delayed flight using line-up",
subtitle = "(Delayed flights are set to be flights that left the airport with over 15 minutes delay)", y = "Count of delayed flight", x = "Month")+
theme(axis.text.x = element_text(size = 8)) +
scale_fill_distiller(palette = 'RdPu', direction =1)
flights_delayed <- filter(flights, dep_delay >15 ) #We want to see only the delayed flights
flights_delayed1 <- flights_delayed %>%  group_by(time_hour) %>% summarise(Avg_dep_delay = mean(dep_delay))
Wheather_cond <- left_join(flights_delayed1, wheather) #combine the two relevant data frames
visib_df <- Wheather_cond %>% group_by(visib) %>% summarise(Avg_dep_delay = mean(Avg_dep_delay))
ggplot(data = visib_df, mapping = aes(x = factor(visib), y = Avg_dep_delay)) + geom_point(color = "violetred4") +
geom_smooth(method = "lm", fill = "violet", color = "violetred4") +
labs(x = "visibility", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Quality of visibility")
flights_delayed <- filter(flights, dep_delay >15 ) #We want to see only the delayed flights
flights_delayed1 <- flights_delayed %>%  group_by(time_hour) %>% summarise(Avg_dep_delay = mean(dep_delay))
Wheather_cond <- left_join(flights_delayed1, wheather) #combine the two relevant data frames
visib_df <- Wheather_cond %>% group_by(visib) %>% summarise(Avg_dep_delay = mean(Avg_dep_delay, na.rm = T))
ggplot(data = visib_df, mapping = aes(x = visib, y = Avg_dep_delay)) + geom_point(color = "violetred4") +
geom_smooth(method = "lm", fill = "violet", color = "violetred4") +
labs(x = "visibility", y="Average Departure Delay Time (minutes)",
title = "Average Departure Delay vs. Quality of visibility")
